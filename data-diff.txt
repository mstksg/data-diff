-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Derivable diffing on arbitrary datatypes using GHC Generics
--   
--   Please see the README on Github at
--   <a>https://github.com/mstksg/data-diff#readme</a>
@package data-diff
@version 0.1.0.0

module Data.Diff.Sequence
listDiff :: Diff a => [a] -> [a] -> SeqPatch a
listPatch :: Eq a => SeqPatch a -> [a] -> Maybe [a]
newtype SeqPatch a
SP :: [Diff a] -> SeqPatch a
[getSP] :: SeqPatch a -> [Diff a]
seqDiff :: Diff a => (t -> [a]) -> t -> t -> SeqPatch a
seqPatch :: Eq a => (t -> [a]) -> ([a] -> t) -> SeqPatch a -> t -> Maybe t
instance Data.Diff.Internal.Diff a => Data.Diff.Internal.Patch (Data.Diff.Sequence.SeqPatch a)
instance Data.Diff.Internal.Diff a => Data.Diff.Internal.Diff [a]

module Data.Diff

module Data.Diff.Generics
newtype GPatch a
GP :: SumDiff Tuple (Prod Edit') (Code a) -> GPatch a
[getGP] :: GPatch a -> SumDiff Tuple (Prod Edit') (Code a)
gdiff :: forall a. (Generic a, Every (Every Diff) (Code a)) => a -> a -> GPatch a
gdiff' :: forall a. (Generic a, Every (Every Diff) (Code a), Every Typeable (Code a)) => a -> a -> GPatch a
gpatch :: (Generic a, Every (Every Diff) (Code a)) => GPatch a -> a -> Maybe a
data GPatchProd a
GPP :: Prod Edit' as -> GPatchProd a
[getGPP] :: GPatchProd a -> Prod Edit' as
gdiffProd :: forall a as. (IsProductType a as, Every Diff as) => a -> a -> GPatchProd a
gpatchProd :: forall a as. (IsProductType a as, Every Diff as) => GPatchProd a -> a -> Maybe a
data SumDiff :: (k -> Type) -> (k -> Type) -> [k] -> Type
[SDSame] :: (Index as :&: (Index as :&: g)) a -> SumDiff f g as
[SDDiff] :: (Index as :&: f) a -> (Index as :&: f) b -> SumDiff f g as
instance (Generics.SOP.Universe.Generic a, Data.Type.Index.Every (Data.Type.Index.Every Data.Diff.Internal.Diff) (Generics.SOP.Universe.Code a), Data.Type.Index.Every (Data.Type.Index.Every (Type.Family.Constraint.Comp Data.Diff.Internal.Patch Data.Diff.Internal.Edit')) (Generics.SOP.Universe.Code a)) => Data.Diff.Internal.Patch (Data.Diff.Generics.GPatch a)
instance (Generics.SOP.Universe.IsProductType a as, Data.Type.Index.Every Data.Diff.Internal.Diff as, Data.Type.Index.Every (Type.Family.Constraint.Comp Data.Diff.Internal.Patch Data.Diff.Internal.Edit') as) => Data.Diff.Internal.Patch (Data.Diff.Generics.GPatchProd a)
